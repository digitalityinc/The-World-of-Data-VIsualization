{
 "cells": [
  
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will be using the Jupyter notebook for many activities this semester. Every notebook has an associated language called the \"kernel\". We will be using in the Python 3 kernel from the IPython project.\n",
    "\n",
    "For more information on how to use the notebook, please read the following (which is also a notebook written by a Bryn Mawr student):\n",
    "\n",
    "* https://www.youtube.com/watch?v=HW29067qVWk"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Python"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Python is a programming language that has been under development for over 25 years [1].\n",
    "\n",
    "This Chapter will not cover everything in Python. If you would like, please consider the following resources:\n",
    "\n",
    "**Getting Started with Python**:\n",
    "\n",
    "* https://www.codecademy.com/learn/python\n",
    "* http://docs.python-guide.org/en/latest/intro/learning/\n",
    "* https://learnpythonthehardway.org/book/\n",
    "* https://www.codementor.io/learn-python-online\n",
    "* https://websitesetup.org/python-cheat-sheet/\n",
    "\n",
    "**Learning Python in Notebooks**:\n",
    "\n",
    "* http://mbakker7.github.io/exploratory_computing_with_python/\n",
    "\n",
    "This is handy to always have available for reference:\n",
    "\n",
    "**Python Reference**:\n",
    "\n",
    "* https://docs.python.org/3.5/reference/\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.1 Statements"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Python is an [imperative language](https://en.wikipedia.org/wiki/Imperative_programming) based on [statements](https://en.wikipedia.org/wiki/Statement_(computer_science&#41;). That is, programs in Python consists of lines composed of statements. A statement can be:\n",
    "\n",
    "* a single expression\n",
    "* an assignment\n",
    "* a function call\n",
    "* a function definition\n",
    "* a statement; statement"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.1.1 Expressions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Numbers\n",
    "  * integers\n",
    "  * floating-point\n",
    "  * complex numbers\n",
    "* strings\n",
    "* boolean values\n",
    "* lists and dicts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.1.1.1 Numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-3"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "-3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1 > 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(3.14)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.1.1.2 Strings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'apple'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'apple'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"apple\" == 'apple'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that the Out might not match exactly the In. In the above example, we used double-quotes but the representation of the string used single-quotes. Python will default to showing representations of values using single-quotes, if it can."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.1.1.3 Boolean Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "False == True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "print(3 > 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.1.1.4 Lists and Dicts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Python has three very useful data structures built into the language:\n",
    "\n",
    "* dictionaries (hash tables): {}\n",
    "* lists: []\n",
    "* tuples: (item, ...)\n",
    "\n",
    "List is a mutable list of items. Tuple is a read-only data structure (immutable)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type([1, 2, 3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tuple"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type((1, 2, 3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 2, 3)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1, 2, 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type({\"apple\": \"a fruit\", \"banana\": \"an herb\", \"monkey\": \"a mammal\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'a fruit'"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "{\"apple\": \"a fruit\", \"banana\": \"an herb\", \"monkey\": \"a mammal\"}[\"apple\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.1.2 Function Calls"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are two ways to call functions in Python:\n",
    "\n",
    "1. by pre-defined infix operator name\n",
    "2. by function name, followed by parentheses\n",
    "\n",
    "Infix operator name:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1 + 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "abs(-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "import operator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "operator.add(1, 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.1.2.1 Print"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Evaluating and display result as an Out, versus evaluating and printing result (side-effect)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "print(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.1.3 Special Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "None"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.1.4 Defining Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plus(a, b):\n",
    "    return a + b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plus(3, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plus(a, b):\n",
    "    a + b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "plus(3, 4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What happened? All functions return *something*, even if you don't specify it. If you don't specify a return value, then it will default to returning `None`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "can only concatenate str (not \"int\") to str",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[26], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124ma\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;241m+\u001b[39m \u001b[38;5;241m1\u001b[39m\n",
      "\u001b[1;31mTypeError\u001b[0m: can only concatenate str (not \"int\") to str"
     ]
    }
   ],
   "source": [
    "\"a\" + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"background-color: lightgrey\">\n",
    "<h2>Sidebar 2-1: How to Read Python Error Messages</h2>\n",
    "\n",
    "<p>\n",
    "Python error messages \n",
    "<p>\n",
    "<tt>TypeError: Can't convert 'int' object to str implicitly</tt>\n",
    "</p>\n",
    "\n",
    "<p>Above the error message is the \"traceback\" also called the \"call stack\". This is a representation of the sequence of procedure calls that lead to the error. If the procedure call originated from code from a file, the filename would be listed after the word \"File\" on each line. If the procedure call originated from a notebook cell, then the word \"ipython-input-#-HEX\".\n",
    "</p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.2 Equality"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2.1 =="
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1 == 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2.2 is"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[] is []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list() is list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tuple() is tuple()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<>:1: SyntaxWarning: \"is\" with 'int' literal. Did you mean \"==\"?\n",
      "<>:1: SyntaxWarning: \"is\" with 'int' literal. Did you mean \"==\"?\n",
      "C:\\Users\\ZHANGH14\\AppData\\Local\\Temp\\ipykernel_24040\\4003206270.py:1: SyntaxWarning: \"is\" with 'int' literal. Did you mean \"==\"?\n",
      "  57663463467 is 57663463467\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "57663463467 is 57663463467"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "x = [\"apple\", \"banana\", \"cherry\"]\n",
    "\n",
    "y = [\"apple\", \"banana\", \"cherry\"]\n",
    "\n",
    "print(x is y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "x = [\"apple\", \"banana\", \"cherry\"]\n",
    "\n",
    "y = x\n",
    "\n",
    "print(x is y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Advanced Topics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.1 Python Warts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* http://web.archive.org/web/20031002184114/www.amk.ca/python/writing/warts.html\n",
    "* \n",
    "* https://www.python.org/dev/peps/pep-3099/"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.2 Scope of variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Is not always clear:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = 0\n",
    "for x in range(10):\n",
    "    y = x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[x for x in range(10, 20)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.3 Scope"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Python follows the LEGB Rule (after https://www.amazon.com/dp/0596513984/):\n",
    "\n",
    "* L, Local: Names assigned in any way within a function (def or lambda)), and not declared global in that function.\n",
    "* E, Enclosing function locals: Name in the local scope of any and all enclosing functions (def or lambda), from inner to outer.\n",
    "* G, Global (module): Names assigned at the top-level of a module file, or declared global in a def within the file.\n",
    "* B, Built-in (Python): Names preassigned in the built-in names module : open, range, SyntaxError,..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 3\n",
    "def foo():\n",
    "    x=4\n",
    "    def bar():\n",
    "        print(x)  # Accesses x from foo's scope\n",
    "    bar()  # Prints 4\n",
    "    x=5\n",
    "    bar()  # Prints 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "foo()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "See [scope_resolution_legb_rule.ipynb](scope_resolution_legb_rule.ipynb) for some additional readings on scope."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.4 Generators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "def function():\n",
    "    for i in range(10):\n",
    "        yield i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<generator object function at 0x0000018A42C59D80>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "for y in function():\n",
    "    print(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.5 Default arguments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "def do_something(a, b, c):\n",
    "    return (a, b, c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 2, 3)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "do_something(1, 2, 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "def do_something_else(a=1, b=2, c=3):\n",
    "    return (a, b, c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 2, 3)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "do_something_else()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "def some_function(start=[]):\n",
    "    start.append(1)\n",
    "    return start"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = some_function()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "result.append(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "other_result = some_function()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 1]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "other_result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.2 List comprehension"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\"List comprehension\" is the idea of writing some code inside of a list that will generate a list.\n",
    "\n",
    "Consider the following:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[x ** 2 for x in range(10)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp_list = []\n",
    "for x in range(10):\n",
    "    temp_list.append(x ** 2)\n",
    "temp_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "But list comprehension is much more concise."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.3 Plotting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After the magic, we then need to import the matplotlib library:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Python has many, many libraries. We will use a few over the course of the semester.\n",
    "\n",
    "To create a simple line plot, just give a list of y-values to the function plt.plot()."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x18a43fec0e0>]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot([5, 8, 2, 6, 1, 8, 2, 3, 4, 5, 6])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x18a43f74f50>]"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot([1, 2, 3, 4], [1, 4, 9, 16])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "But you should never create a plot that doesn't have labels on the x and y axises, and should always have a title. Read the documentation on matplotlib and add labels and a title to the plot above:\n",
    "\n",
    "http://matplotlib.org/api/pyplot_api.html\n",
    "\n",
    "Another commonly used library (especially with matplotlib is numpy). Often imported as:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1 align=center><font size = 5>Why was the following infographics about Covid tendencies complained to be misleading? Can you  generate your own plot to compare with it?</font></h1> \n",
    "\n",
    "\n",
    "<a href=\"https://viz.wtf/image/625723936233209856\"><img src = \"https://64.media.tumblr.com/8d1ec6eea58d4503890f80eaaa885468/tumblr_qdr3s8xjHE1sgh0voo1_1280.jpg\" width = 600> </a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<H1>References</H1>\n",
    "\n",
    "[1] https://en.wikipedia.org/wiki/History_of_Python"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
